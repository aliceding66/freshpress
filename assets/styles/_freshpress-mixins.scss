// Declare custom mixins

/// Output Map
/// @author FreshBooks Website Services Team
/// @param {Map} $map - Map
/// @output {*} - all of the properties and values in the map as sass props and vals

@mixin output-map( $map ) {
	@each $prop, $value in $map {
		#{$prop}: $value;
	}
}

/// Output Map
/// @author FreshBooks Website Services Team
/// @param {Map} $map - Map - expected to be a map with the following schema:
/// 		$map: (
/// 			breakpoint: (
/// 				css-prop: css-value,
/// 				another-css-prop: another-css-value,
/// 			),
/// 			another-breakpoint: (
/// 				css-prop: css-value,
/// 				another-css-prop: another-css-value,
/// 			),
/// 		)
/// Where breakpoint is one of the keys in the $grid-breakpoints map defined in _freshpress-variables.scss:
/// And css-prop: css-value are regular CSS props and values
/// @param {String} $scope - one of "up", "down" or "only" to define the direction of the media queries.
/// @output {*} - all of the properties and values in the map as sass props and values as bound by the media queries and breakpoints provided

@mixin output-responsive-map( $map, $scope: up ) {
	@each $breakpoint, $bp-map in $map {
		@if $scope == up {
			@include media-breakpoint-up( $breakpoint ) {
				@include output-map( $bp-map );
			}
		}
		@if $scope == down {
			@include media-breakpoint-down( $breakpoint ) {
				@include output-map( $bp-map );
			}
		}
		@if $scope == only {
			@include media-breakpoint-only( $breakpoint ) {
				@include output-map( $bp-map );
			}
		}
	}
}

/// Aspect Ratio Box
/// @author FreshBooks Website Services Team
/// @param {number} $width - the width of the aspect ratio expressed as an integer without unit
/// @param {number} $height - the height of the aspect ratio expressed as an integer without unit
/// @output {*} - Scoped pseudo elements that will maintain a **minimum** aspect ratio for the selector the
/// mixin is included in.  it will allow for content to expand beyond the size of the box and not break the layout.
/// @link https://css-tricks.com/aspect-ratio-boxes/

@mixin aspect-ratio-box( $width, $height ) {
	&::before {
		float: left;
		width: 1px;
		height: 0;
		margin-left: -1px;
		padding-top: $height / $width * 100%;
		content: '';
	}
	&::after {
		display: table;
		clear: both;
		content: '';
	}
}

// Now import the bootstrap mixins
// @import '~bootstrap/scss/mixins';
@import '~bootstrap/scss/vendor/rfs';
@import '~bootstrap/scss/mixins/deprecate';
@import '~bootstrap/scss/mixins/buttons';
@import '~bootstrap/scss/mixins/screen-reader';
@import '~bootstrap/scss/mixins/text-truncate';
@import '~bootstrap/scss/mixins/box-shadow';
@import '~bootstrap/scss/mixins/gradients';
@import '~bootstrap/scss/mixins/hover';
@import '~bootstrap/scss/mixins/image';
@import '~bootstrap/scss/mixins/border-radius';
@import '~bootstrap/scss/mixins/grid';
@import '~bootstrap/scss/mixins/grid-framework';
@import '~bootstrap/scss/mixins/table-row';
@import '~bootstrap/scss/mixins/forms';
@import '~bootstrap/scss/mixins/transition';
@import '~bootstrap/scss/mixins/background-variant';
@import '~bootstrap/scss/mixins/clearfix';
@import '~bootstrap/scss/mixins/text-emphasis';
@import '~bootstrap/scss/mixins/text-hide';
@import '~bootstrap/scss/mixins/alert';
@import '~bootstrap/scss/mixins/reset-text';
@import '~bootstrap/scss/mixins/lists';
@import '~bootstrap/scss/mixins/list-group';

// Getting necessary mixins here, instead of including incompatoble ones from @import '~bootstrap/scss/mixins' just pasting them here and modifying accordingly.

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next(
	$name,
	$breakpoints: $grid-breakpoints,
	$breakpoint-names: map-keys( $breakpoints )
) {
	$n: index( $breakpoint-names, $name );
	@return if(
		$n != null and $n < length( $breakpoint-names ),
		nth( $breakpoint-names, $n + 1 ),
		null
	);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min( $name, $breakpoints: $grid-breakpoints ) {
	$min: map-get( $breakpoints, $name );
	@return if( $min != 0, $min, null );
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max( $name, $breakpoints: $grid-breakpoints ) {
	$next: breakpoint-next( $name, $breakpoints );
	@return if( $next, breakpoint-min( $next, $breakpoints ) - 0.02, null );
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix( $name, $breakpoints: $grid-breakpoints ) {
	@return if( breakpoint-min( $name, $breakpoints ) == null, '', '-#{$name}' );
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up( $name, $breakpoints: $grid-breakpoints ) {
	$min: breakpoint-min( $name, $breakpoints );
	@if $min {
		@media ( min-width: $min ) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down( $name, $breakpoints: $grid-breakpoints ) {
	$max: breakpoint-max( $name, $breakpoints );
	@if $max {
		@media ( max-width: $max ) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between( $lower, $upper, $breakpoints: $grid-breakpoints ) {
	$min: breakpoint-min( $lower, $breakpoints );
	$max: breakpoint-max( $upper, $breakpoints );

	@if $min != null and $max != null {
		@media ( min-width: $min ) and ( max-width: $max ) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up( $lower, $breakpoints ) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down( $upper, $breakpoints ) {
			@content;
		}
	}
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only( $name, $breakpoints: $grid-breakpoints ) {
	$min: breakpoint-min( $name, $breakpoints );
	$max: breakpoint-max( $name, $breakpoints );

	@if $min != null and $max != null {
		@media ( min-width: $min ) and ( max-width: $max ) {
			@content;
		}
	} @else if $max == null {
		@include media-breakpoint-up( $name, $breakpoints ) {
			@content;
		}
	} @else if $min == null {
		@include media-breakpoint-down( $name, $breakpoints ) {
			@content;
		}
	}
}
