import {
{{# detailedComments }}
	BlockControls,
{{/ detailedComments }}
{{# innerBlocks }}
	InnerBlocks,
{{/ innerBlocks }}
	InspectorControls,
	useBlockProps,
} from '@wordpress/block-editor';
import { PanelBody } from '@wordpress/components';
// eslint-disable-next-line no-unused-vars
import { __ } from '@wordpress/i18n';
import EditorControls from 'scripts/components/_EditorControls';
import { getCommonBlockSettingsClass } from 'scripts/components/EditorControls/_helpers';
import Template from 'scripts/components/_Template';
{{# blockId }}
import { {{# stateManager }}BlockStateManager, {{/ stateManager }}generateBlockId } from 'scripts/helpers/_fpbk_blocks';
{{/ blockId }}
import blockTemplate from '../templates/block.mustache';
{{# mustachePartial }}
import { templateString as blockPartial } from '../templates/block.partial.mustache';
{{/ mustachePartial }}
// eslint-disable-next-line no-unused-vars
{{# stateManagerAttributeName }}
import * as actions from './state/{{ stateManagerAttributeName }}/_actions';
import reducer from './state/{{ stateManagerAttributeName }}/_reducer';
{{/ stateManagerAttributeName }}
import { name as blockName } from '../block.json';

export default function ( { attributes, clientId, setAttributes } ) {
	const blockProps = useBlockProps( {
{{# detailedComments }}
		// Same class that was passed in PHP "render" in "$this->get_wrapper_properties()" with additional block name in class.
{{/ detailedComments }}
		className: `{{ name }} ${ getCommonBlockSettingsClass( attributes ) }`,
	} );

{{# blockId }}
	if ( ! attributes.id || attributes.id === '' ) {
		setAttributes( {
			id: generateBlockId( blockName ),
		} );
	}
{{/ blockId }}
{{# stateManager }}
	const blockStateManager = new BlockStateManager( attributes, setAttributes );
	// eslint-disable-next-line no-unused-vars
	const [ {{ camelStateManagerAttributeName }}, dispatch ] = blockStateManager.addReducerManager(
		reducer,
		'{{ stateManagerAttributeName }}'
	);
	{{# detailedComments }}
	// You can now edit {{ stateManagerAttributeName }} values by this:
	// dispatch( { type: actions.EDIT, index: currentArrayIndex, value: valueToSave } );

    {{/ detailedComments }}
{{/ stateManager }}
{{# templateData }}
	// eslint-disable-next-line no-undef
	const templateData = {{ camel }}TemplateData ? {{ camel }}TemplateData : attributes;
{{# detailedComments }}
	// To pass template_data with attributes as well:
	// const templateData = {{ camel }}TemplateData ? { ...{{ camel }}TemplateData, ...attributes } : attributes;
{{/ detailedComments }}
{{/ templateData }}

	return (
		<EditorControls.Context.Provider
			value={ { attributes, blockName, clientId, setAttributes } }
		>
{{# detailedComments }}
			<BlockControls>
				{ /* Here You can insert fields that will be placed in block's tooltip. */ }
			</BlockControls>

{{/ detailedComments }}
			<InspectorControls>
				<PanelBody initialOpen={ true }>{{# detailedComments }}{ /* Here You can insert fields that will be placed on sidebar. */ }{{/ detailedComments }}</PanelBody>

{{# detailedComments }}
				{ /* This renders fields that are defined in Block Settings and are common for all blocks. */ }
{{/ detailedComments }}
				<EditorControls.Acf.CommonBlockSettings />
			</InspectorControls>

			<div { ...blockProps }>
{{# detailedComments }}
				{ /* Here You put block content that is visible in Editor. */ }
{{/ detailedComments }}
				<Template
					template={ blockTemplate }
{{# templateData }}
					attributes={ templateData }
{{/ templateData }}
{{^ templateData }}
					attributes={ attributes }
{{/ templateData }}
{{# detailedComments }}
					components={
						{
							/* Pass here components that needs to be renderer in block. */
						}
					}
{{/ detailedComments }}
{{# mustachePartial }}
					partials={ {
						partial: blockPartial,
					} }
{{/ mustachePartial }}
				/>
{{# innerBlocks }}
				<InnerBlocks />
{{/ innerBlocks }}
			</div>
		</EditorControls.Context.Provider>
	);
}
