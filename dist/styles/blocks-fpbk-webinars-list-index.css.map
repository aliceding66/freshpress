{"version":3,"sources":["webpack:///../blocks/fpbk/webinars-list/src/editor.scss","webpack:///editor.scss","webpack:///../blocks/fpbk/webinars-list/src/style.scss","webpack:///style.scss","webpack:///./styles/_freshpress-mixins.scss"],"names":[],"mappings":"AACC;EACC;EACA;ACAF;;ADKC;EACC;EACA;ACFF,C;ACJA;EACC;ACHD;ADKC;EACC;ACHF;ACsKE;EFpKD;IAIE;ECFD;AACF;ACiKE;EFpKD;IAQE;ECDD;AACF;ADKE;EACC;ACHH;ADOC;EAEC;ACNF;ADSC;EACC;ACPF;ACmJE;EFzID;IAEE;ECRD;AACF;AC8IE;EFzID;IAME;ECPD;AACF,C","file":"styles/blocks-fpbk-webinars-list-index.css","sourcesContent":[".webinars-list__item {\n\t.fp-block.button {\n\t\tbackground: none;\n\t\tborder: none;\n\t}\n}\n\n.components-panel {\n\t.components-notice {\n\t\tmargin-right: 0;\n\t\tmargin-left: 0;\n\t}\n}\n",".webinars-list__item .fp-block.button {\n  background: none;\n  border: none;\n}\n\n.components-panel .components-notice {\n  margin-right: 0;\n  margin-left: 0;\n}","// Webinars List.\n\n@import '~styles/freshpress-includes';\n\n.webinars-list {\n\tmargin: 0 -15px;\n\n\t&__list {\n\t\tbackground-color: #eaf6fe;\n\n\t\t@include media-breakpoint-up( sm ) {\n\t\t\tpadding: 1.25rem 2rem 0.75rem;\n\t\t}\n\n\t\t@include media-breakpoint-up( md ) {\n\t\t\tbackground-color: #fff;\n\t\t}\n\t}\n\n\t&__item {\n\t\t&:first-child {\n\t\t\tborder-top: 1px solid $rule-grey;\n\t\t}\n\t}\n\n\t&__item-time,\n\t&__item-date {\n\t\tfont-size: px-to-rem( 16 );\n\t}\n\n\t&__item-time {\n\t\tcolor: $dark-grey;\n\t}\n\n\t&__item-title {\n\t\t@include media-breakpoint-up( md ) {\n\t\t\tmax-width: 150px;\n\t\t}\n\n\t\t@include media-breakpoint-up( lg ) {\n\t\t\tmax-width: 300px;\n\t\t}\n\t}\n}\n",".webinars-list {\n  margin: 0 -15px;\n}\n.webinars-list__list {\n  background-color: #eaf6fe;\n}\n@media (min-width: 480px) {\n  .webinars-list__list {\n    padding: 1.25rem 2rem 0.75rem;\n  }\n}\n@media (min-width: 768px) {\n  .webinars-list__list {\n    background-color: #fff;\n  }\n}\n.webinars-list__item:first-child {\n  border-top: 1px solid #cdd4d9;\n}\n.webinars-list__item-time, .webinars-list__item-date {\n  font-size: 1rem;\n}\n.webinars-list__item-time {\n  color: #8495a2;\n}\n@media (min-width: 768px) {\n  .webinars-list__item-title {\n    max-width: 150px;\n  }\n}\n@media (min-width: 1024px) {\n  .webinars-list__item-title {\n    max-width: 300px;\n  }\n}","// Declare custom mixins\n\n/// Output Map\n/// @author FreshBooks Website Services Team\n/// @param {Map} $map - Map\n/// @output {*} - all of the properties and values in the map as sass props and vals\n\n@mixin output-map( $map ) {\n\t@each $prop, $value in $map {\n\t\t#{$prop}: $value;\n\t}\n}\n\n/// Output Map\n/// @author FreshBooks Website Services Team\n/// @param {Map} $map - Map - expected to be a map with the following schema:\n/// \t\t$map: (\n/// \t\t\tbreakpoint: (\n/// \t\t\t\tcss-prop: css-value,\n/// \t\t\t\tanother-css-prop: another-css-value,\n/// \t\t\t),\n/// \t\t\tanother-breakpoint: (\n/// \t\t\t\tcss-prop: css-value,\n/// \t\t\t\tanother-css-prop: another-css-value,\n/// \t\t\t),\n/// \t\t)\n/// Where breakpoint is one of the keys in the $grid-breakpoints map defined in _freshpress-variables.scss:\n/// And css-prop: css-value are regular CSS props and values\n/// @param {String} $scope - one of \"up\", \"down\" or \"only\" to define the direction of the media queries.\n/// @output {*} - all of the properties and values in the map as sass props and values as bound by the media queries and breakpoints provided\n\n@mixin output-responsive-map( $map, $scope: up ) {\n\t@each $breakpoint, $bp-map in $map {\n\t\t@if $scope == up {\n\t\t\t@include media-breakpoint-up( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t\t@if $scope == down {\n\t\t\t@include media-breakpoint-down( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t\t@if $scope == only {\n\t\t\t@include media-breakpoint-only( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/// Aspect Ratio Box\n/// @author FreshBooks Website Services Team\n/// @param {number} $width - the width of the aspect ratio expressed as an integer without unit\n/// @param {number} $height - the height of the aspect ratio expressed as an integer without unit\n/// @output {*} - Scoped pseudo elements that will maintain a **minimum** aspect ratio for the selector the\n/// mixin is included in.  it will allow for content to expand beyond the size of the box and not break the layout.\n/// @link https://css-tricks.com/aspect-ratio-boxes/\n\n@mixin aspect-ratio-box( $width, $height ) {\n\t&::before {\n\t\tfloat: left;\n\t\twidth: 1px;\n\t\theight: 0;\n\t\tmargin-left: -1px;\n\t\tpadding-top: $height / $width * 100%;\n\t\tcontent: '';\n\t}\n\t&::after {\n\t\tdisplay: table;\n\t\tclear: both;\n\t\tcontent: '';\n\t}\n}\n\n// Now import the bootstrap mixins\n// @import '~bootstrap/scss/mixins';\n@import '~bootstrap/scss/vendor/rfs';\n@import '~bootstrap/scss/mixins/deprecate';\n@import '~bootstrap/scss/mixins/buttons';\n@import '~bootstrap/scss/mixins/screen-reader';\n@import '~bootstrap/scss/mixins/text-truncate';\n@import '~bootstrap/scss/mixins/box-shadow';\n@import '~bootstrap/scss/mixins/gradients';\n@import '~bootstrap/scss/mixins/hover';\n@import '~bootstrap/scss/mixins/image';\n@import '~bootstrap/scss/mixins/border-radius';\n@import '~bootstrap/scss/mixins/grid';\n@import '~bootstrap/scss/mixins/grid-framework';\n@import '~bootstrap/scss/mixins/table-row';\n@import '~bootstrap/scss/mixins/forms';\n@import '~bootstrap/scss/mixins/transition';\n@import '~bootstrap/scss/mixins/background-variant';\n@import '~bootstrap/scss/mixins/clearfix';\n@import '~bootstrap/scss/mixins/text-emphasis';\n@import '~bootstrap/scss/mixins/text-hide';\n@import '~bootstrap/scss/mixins/alert';\n@import '~bootstrap/scss/mixins/reset-text';\n@import '~bootstrap/scss/mixins/lists';\n@import '~bootstrap/scss/mixins/list-group';\n\n// Getting necessary mixins here, instead of including incompatoble ones from @import '~bootstrap/scss/mixins' just pasting them here and modifying accordingly.\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n\t$name,\n\t$breakpoints: $grid-breakpoints,\n\t$breakpoint-names: map-keys( $breakpoints )\n) {\n\t$n: index( $breakpoint-names, $name );\n\t@return if(\n\t\t$n != null and $n < length( $breakpoint-names ),\n\t\tnth( $breakpoint-names, $n + 1 ),\n\t\tnull\n\t);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: map-get( $breakpoints, $name );\n\t@return if( $min != 0, $min, null );\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max( $name, $breakpoints: $grid-breakpoints ) {\n\t$next: breakpoint-next( $name, $breakpoints );\n\t@return if( $next, breakpoint-min( $next, $breakpoints ) - 0.02, null );\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix( $name, $breakpoints: $grid-breakpoints ) {\n\t@return if( breakpoint-min( $name, $breakpoints ) == null, '', '-#{$name}' );\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $name, $breakpoints );\n\t@if $min {\n\t\t@media ( min-width: $min ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down( $name, $breakpoints: $grid-breakpoints ) {\n\t$max: breakpoint-max( $name, $breakpoints );\n\t@if $max {\n\t\t@media ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between( $lower, $upper, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $lower, $breakpoints );\n\t$max: breakpoint-max( $upper, $breakpoints );\n\n\t@if $min != null and $max != null {\n\t\t@media ( min-width: $min ) and ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $max == null {\n\t\t@include media-breakpoint-up( $lower, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $min == null {\n\t\t@include media-breakpoint-down( $upper, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $name, $breakpoints );\n\t$max: breakpoint-max( $name, $breakpoints );\n\n\t@if $min != null and $max != null {\n\t\t@media ( min-width: $min ) and ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $max == null {\n\t\t@include media-breakpoint-up( $name, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $min == null {\n\t\t@include media-breakpoint-down( $name, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n"],"sourceRoot":""}