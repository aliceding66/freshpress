{"version":3,"sources":["webpack:///../blocks/fpbk/cta-banner/src/style.scss","webpack:///style.scss","webpack:///./styles/_freshpress-mixins.scss"],"names":[],"mappings":"AAEA;EACC;EACA;EACA;EACA;EACA;ACDD;ADGC;EACC;ACDF;ADIC;EACC;EACA;ACFF;ADKC;EACC;ACHF;ADMC;EACC;EACA;EACA;ACJF;ADOC;EACC;EACA;ACLF;ADQC;EACC;EACA;ACNF;ADSC;EACC;EACA;ACPF;ACuJE;EF7ID;IAEE;IACA;IACA;ECRD;AACF;ADWC;EACC;EACA;EACA;EACA;ACTF;AC0IE;EFrID;IAOE;IACA;ECRD;AACF;ADWC;EACC;EACA;ACTF;ACgIE;EFzHD;IAKE;IACA;IACA;ECRD;AACF;ADWC;EACC;EACA;ACTF;ACqHE;EF9GD;IAKE;ECRD;AACF;ACgHE;EF9GD;IASE;ECPD;AACF;AC2GE;EF9GD;IAaE;IACA;ECND;AACF;ADQC;EACC;ACNF;;ADUC;EACC;EACA;ACPF;ADSC;EACC;ACPF;ADSC;EACC;EACA;EACA;ACPF;ADSC;EACC;EACA;EACA;EACA;ACPF;AC+EE;EF5ED;IAOE;IACA;IACA;ECND;AACF;ADQC;EACC;EACA;ACNF;;ADUC;EACC;EACA;ACPF;ADUC;EACC;EACA;ACRF;ADWC;EACC;EACA;ACTF;;ADcC;EACC;ACXF;ADcC;EACC;EACA;EACA;ACZF,C","file":"styles/blocks-fpbk-cta-banner-style.css","sourcesContent":["@import '~styles/freshpress-includes';\n\n.cta-banner {\n\tmax-width: 716.66px;\n\tbackground-image: url( ./../../../../assets/images/cta-banner/background-standard.svg );\n\tbackground-repeat: no-repeat;\n\tbackground-position: right top;\n\tbackground-size: cover;\n\n\ta {\n\t\tcolor: #000 !important;\n\t}\n\n\ta:hover {\n\t\tcolor: #000 !important;\n\t\ttext-decoration: none !important;\n\t}\n\n\t&.is-style-standard-blue {\n\t\tbackground-image: url( ./../../../../assets/images/cta-banner/background-standard-blue.svg );\n\t}\n\n\t&.is-style-navigation {\n\t\tbackground-image: url( ./../../../../assets/images/cta-banner/background-navigation.svg );\n\t\tbackground-position: top left;\n\t\tbackground-size: cover;\n\t}\n\n\t&.aligncenter {\n\t\tmargin-right: auto;\n\t\tmargin-left: auto;\n\t}\n\n\t&.alignleft {\n\t\tmargin-right: auto;\n\t\tmargin-left: 0;\n\t}\n\n\t&.alignright {\n\t\tmargin-right: 0;\n\t\tmargin-left: auto;\n\t}\n\n\t.btn {\n\t\t@include media-breakpoint-down( md ) {\n\t\t\tfont-size: 10px;\n\t\t\tline-height: 11.7px;\n\t\t\tborder-radius: 5px;\n\t\t}\n\t}\n\n\t.btn-midnight-blue {\n\t\tpadding: px-to-rem( 10 ) px-to-rem( 34 );\n\t\tcolor: #fff !important;\n\t\tfont-weight: 500;\n\t\tfont-size: px-to-rem( 20 );\n\n\t\t@include media-breakpoint-down( md ) {\n\t\t\tpadding: px-to-rem( 5 ) px-to-rem( 18 );\n\t\t\tfont-size: px-to-rem( 13 );\n\t\t}\n\t}\n\n\t.banner-heading {\n\t\tpadding: px-to-rem( 37 ) px-to-rem( 34 );\n\t\tfont-size: px-to-rem( 32 );\n\n\t\t@include media-breakpoint-down( md ) {\n\t\t\tmargin: 0 !important;\n\t\t\tpadding: px-to-rem( 17 ) px-to-rem( 17 );\n\t\t\tfont-size: px-to-rem( 16 );\n\t\t}\n\t}\n\n\t.l-50 {\n\t\tposition: relative;\n\t\tleft: -50px;\n\n\t\t@include media-breakpoint-down( lg ) {\n\t\t\tleft: -2vw;\n\t\t}\n\n\t\t@include media-breakpoint-down( md ) {\n\t\t\tleft: -4vw;\n\t\t}\n\n\t\t@include media-breakpoint-down( sm ) {\n\t\t\tleft: 4vw;\n\t\t\tmax-width: 40vw;\n\t\t}\n\t}\n\t.columns {\n\t\tmax-width: 100%;\n\t}\n}\n.is-style-navigation {\n\t.column {\n\t\talign-items: flex-start !important;\n\t\tmax-width: 100% !important;\n\t}\n\t.columns {\n\t\tdisplay: block !important;\n\t}\n\t.l-50 {\n\t\tleft: 35px !important;\n\t\tpadding-bottom: 35px;\n\t\tpadding-left: 0;\n\t}\n\t.banner-heading {\n\t\tpadding: 27px 2.125rem 0.5rem 22px;\n\t\tfont-weight: 500;\n\t\tfont-size: 30px;\n\t\tline-height: 1;\n\n\t\t@include media-breakpoint-down( sm ) {\n\t\t\tposition: relative;\n\t\t\tleft: 35px;\n\t\t\tfont-size: 20px !important;\n\t\t}\n\t}\n\t.btn-midnight-blue {\n\t\tpadding: 12px 59px;\n\t\tfont-size: 16px;\n\t}\n}\n.sticky-top {\n\t.flexible-colour-background {\n\t\tflex: 100% !important;\n\t\tmax-width: 100% !important;\n\t}\n\n\t.btn-midnight-blue {\n\t\tposition: relative;\n\t\tleft: -9px !important;\n\t}\n\n\t.column {\n\t\tflex: 0 0 100% !important;\n\t\tmax-width: 100% !important;\n\t}\n}\n\n.hub__mobile-cta-banner {\n\t.columns {\n\t\tmargin-right: 0;\n\t}\n\n\t.cta-banner {\n\t\twidth: calc( 100vw - 30px );\n\t\tmin-width: calc( 100% - 30px );\n\t\tmargin: auto !important;\n\t}\n}\n",".cta-banner {\n  max-width: 716.66px;\n  background-image: url(./../../../../assets/images/cta-banner/background-standard.svg);\n  background-repeat: no-repeat;\n  background-position: right top;\n  background-size: cover;\n}\n.cta-banner a {\n  color: #000 !important;\n}\n.cta-banner a:hover {\n  color: #000 !important;\n  text-decoration: none !important;\n}\n.cta-banner.is-style-standard-blue {\n  background-image: url(./../../../../assets/images/cta-banner/background-standard-blue.svg);\n}\n.cta-banner.is-style-navigation {\n  background-image: url(./../../../../assets/images/cta-banner/background-navigation.svg);\n  background-position: top left;\n  background-size: cover;\n}\n.cta-banner.aligncenter {\n  margin-right: auto;\n  margin-left: auto;\n}\n.cta-banner.alignleft {\n  margin-right: auto;\n  margin-left: 0;\n}\n.cta-banner.alignright {\n  margin-right: 0;\n  margin-left: auto;\n}\n@media (max-width: 1023.98px) {\n  .cta-banner .btn {\n    font-size: 10px;\n    line-height: 11.7px;\n    border-radius: 5px;\n  }\n}\n.cta-banner .btn-midnight-blue {\n  padding: 0.625rem 2.125rem;\n  color: #fff !important;\n  font-weight: 500;\n  font-size: 1.25rem;\n}\n@media (max-width: 1023.98px) {\n  .cta-banner .btn-midnight-blue {\n    padding: 0.3125rem 1.125rem;\n    font-size: 0.8125rem;\n  }\n}\n.cta-banner .banner-heading {\n  padding: 2.3125rem 2.125rem;\n  font-size: 2rem;\n}\n@media (max-width: 1023.98px) {\n  .cta-banner .banner-heading {\n    margin: 0 !important;\n    padding: 1.0625rem 1.0625rem;\n    font-size: 1rem;\n  }\n}\n.cta-banner .l-50 {\n  position: relative;\n  left: -50px;\n}\n@media (max-width: 1279.98px) {\n  .cta-banner .l-50 {\n    left: -2vw;\n  }\n}\n@media (max-width: 1023.98px) {\n  .cta-banner .l-50 {\n    left: -4vw;\n  }\n}\n@media (max-width: 767.98px) {\n  .cta-banner .l-50 {\n    left: 4vw;\n    max-width: 40vw;\n  }\n}\n.cta-banner .columns {\n  max-width: 100%;\n}\n\n.is-style-navigation .column {\n  align-items: flex-start !important;\n  max-width: 100% !important;\n}\n.is-style-navigation .columns {\n  display: block !important;\n}\n.is-style-navigation .l-50 {\n  left: 35px !important;\n  padding-bottom: 35px;\n  padding-left: 0;\n}\n.is-style-navigation .banner-heading {\n  padding: 27px 2.125rem 0.5rem 22px;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 1;\n}\n@media (max-width: 767.98px) {\n  .is-style-navigation .banner-heading {\n    position: relative;\n    left: 35px;\n    font-size: 20px !important;\n  }\n}\n.is-style-navigation .btn-midnight-blue {\n  padding: 12px 59px;\n  font-size: 16px;\n}\n\n.sticky-top .flexible-colour-background {\n  flex: 100% !important;\n  max-width: 100% !important;\n}\n.sticky-top .btn-midnight-blue {\n  position: relative;\n  left: -9px !important;\n}\n.sticky-top .column {\n  flex: 0 0 100% !important;\n  max-width: 100% !important;\n}\n\n.hub__mobile-cta-banner .columns {\n  margin-right: 0;\n}\n.hub__mobile-cta-banner .cta-banner {\n  width: calc( 100vw - 30px );\n  min-width: calc( 100% - 30px );\n  margin: auto !important;\n}","// Declare custom mixins\n\n/// Output Map\n/// @author FreshBooks Website Services Team\n/// @param {Map} $map - Map\n/// @output {*} - all of the properties and values in the map as sass props and vals\n\n@mixin output-map( $map ) {\n\t@each $prop, $value in $map {\n\t\t#{$prop}: $value;\n\t}\n}\n\n/// Output Map\n/// @author FreshBooks Website Services Team\n/// @param {Map} $map - Map - expected to be a map with the following schema:\n/// \t\t$map: (\n/// \t\t\tbreakpoint: (\n/// \t\t\t\tcss-prop: css-value,\n/// \t\t\t\tanother-css-prop: another-css-value,\n/// \t\t\t),\n/// \t\t\tanother-breakpoint: (\n/// \t\t\t\tcss-prop: css-value,\n/// \t\t\t\tanother-css-prop: another-css-value,\n/// \t\t\t),\n/// \t\t)\n/// Where breakpoint is one of the keys in the $grid-breakpoints map defined in _freshpress-variables.scss:\n/// And css-prop: css-value are regular CSS props and values\n/// @param {String} $scope - one of \"up\", \"down\" or \"only\" to define the direction of the media queries.\n/// @output {*} - all of the properties and values in the map as sass props and values as bound by the media queries and breakpoints provided\n\n@mixin output-responsive-map( $map, $scope: up ) {\n\t@each $breakpoint, $bp-map in $map {\n\t\t@if $scope == up {\n\t\t\t@include media-breakpoint-up( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t\t@if $scope == down {\n\t\t\t@include media-breakpoint-down( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t\t@if $scope == only {\n\t\t\t@include media-breakpoint-only( $breakpoint ) {\n\t\t\t\t@include output-map( $bp-map );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/// Aspect Ratio Box\n/// @author FreshBooks Website Services Team\n/// @param {number} $width - the width of the aspect ratio expressed as an integer without unit\n/// @param {number} $height - the height of the aspect ratio expressed as an integer without unit\n/// @output {*} - Scoped pseudo elements that will maintain a **minimum** aspect ratio for the selector the\n/// mixin is included in.  it will allow for content to expand beyond the size of the box and not break the layout.\n/// @link https://css-tricks.com/aspect-ratio-boxes/\n\n@mixin aspect-ratio-box( $width, $height ) {\n\t&::before {\n\t\tfloat: left;\n\t\twidth: 1px;\n\t\theight: 0;\n\t\tmargin-left: -1px;\n\t\tpadding-top: $height / $width * 100%;\n\t\tcontent: '';\n\t}\n\t&::after {\n\t\tdisplay: table;\n\t\tclear: both;\n\t\tcontent: '';\n\t}\n}\n\n// Now import the bootstrap mixins\n// @import '~bootstrap/scss/mixins';\n@import '~bootstrap/scss/vendor/rfs';\n@import '~bootstrap/scss/mixins/deprecate';\n@import '~bootstrap/scss/mixins/buttons';\n@import '~bootstrap/scss/mixins/screen-reader';\n@import '~bootstrap/scss/mixins/text-truncate';\n@import '~bootstrap/scss/mixins/box-shadow';\n@import '~bootstrap/scss/mixins/gradients';\n@import '~bootstrap/scss/mixins/hover';\n@import '~bootstrap/scss/mixins/image';\n@import '~bootstrap/scss/mixins/border-radius';\n@import '~bootstrap/scss/mixins/grid';\n@import '~bootstrap/scss/mixins/grid-framework';\n@import '~bootstrap/scss/mixins/table-row';\n@import '~bootstrap/scss/mixins/forms';\n@import '~bootstrap/scss/mixins/transition';\n@import '~bootstrap/scss/mixins/background-variant';\n@import '~bootstrap/scss/mixins/clearfix';\n@import '~bootstrap/scss/mixins/text-emphasis';\n@import '~bootstrap/scss/mixins/text-hide';\n@import '~bootstrap/scss/mixins/alert';\n@import '~bootstrap/scss/mixins/reset-text';\n@import '~bootstrap/scss/mixins/lists';\n@import '~bootstrap/scss/mixins/list-group';\n\n// Getting necessary mixins here, instead of including incompatoble ones from @import '~bootstrap/scss/mixins' just pasting them here and modifying accordingly.\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n\t$name,\n\t$breakpoints: $grid-breakpoints,\n\t$breakpoint-names: map-keys( $breakpoints )\n) {\n\t$n: index( $breakpoint-names, $name );\n\t@return if(\n\t\t$n != null and $n < length( $breakpoint-names ),\n\t\tnth( $breakpoint-names, $n + 1 ),\n\t\tnull\n\t);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: map-get( $breakpoints, $name );\n\t@return if( $min != 0, $min, null );\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max( $name, $breakpoints: $grid-breakpoints ) {\n\t$next: breakpoint-next( $name, $breakpoints );\n\t@return if( $next, breakpoint-min( $next, $breakpoints ) - 0.02, null );\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix( $name, $breakpoints: $grid-breakpoints ) {\n\t@return if( breakpoint-min( $name, $breakpoints ) == null, '', '-#{$name}' );\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $name, $breakpoints );\n\t@if $min {\n\t\t@media ( min-width: $min ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down( $name, $breakpoints: $grid-breakpoints ) {\n\t$max: breakpoint-max( $name, $breakpoints );\n\t@if $max {\n\t\t@media ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between( $lower, $upper, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $lower, $breakpoints );\n\t$max: breakpoint-max( $upper, $breakpoints );\n\n\t@if $min != null and $max != null {\n\t\t@media ( min-width: $min ) and ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $max == null {\n\t\t@include media-breakpoint-up( $lower, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $min == null {\n\t\t@include media-breakpoint-down( $upper, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only( $name, $breakpoints: $grid-breakpoints ) {\n\t$min: breakpoint-min( $name, $breakpoints );\n\t$max: breakpoint-max( $name, $breakpoints );\n\n\t@if $min != null and $max != null {\n\t\t@media ( min-width: $min ) and ( max-width: $max ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $max == null {\n\t\t@include media-breakpoint-up( $name, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t} @else if $min == null {\n\t\t@include media-breakpoint-down( $name, $breakpoints ) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n"],"sourceRoot":""}